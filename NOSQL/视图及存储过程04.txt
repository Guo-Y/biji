

 ===================视图==================

+++++++++++++++MySQL视图++++++++++++++++++
一、视图介绍
1、虚拟表
2、内容与真实的表相似，有字段有记录
3、视图并不在数据库中以存储的数据形式存在（有表结构文件，没有表文件）
4、行和列的数据来自定义视图时查询所引用的基表，并且在具体引用视图时动态生成


二、视图优点
1、简单：
	用户不需要关心视图中的数据如何查询获得
	时途中的数据已经是过滤好的符合条件的结果集
2、安全：用户只能看到视图中的数据

3、数据独立
	一旦视图结构确定，可以屏蔽表结构对用户的影响

++++++++++++创建视图++++++++
一、格式：
create view   视图名称 as SQL查询；
create  view  视图名称（字段名称） as SQL查询；
		不定义字段名，默认使用基表的字段名；定义字段名，视图表中的字段必须和基表的字段个数相同。

例子：创建一个视图
create view  a1 as select name,uid,gid from db9.user;

二、查看视图

1、查看表的状态信息：
show table status\G;

2、查看一张表是否为视图表：
show table status where comment="view"\G;

3、查看创建视图表的命令：
show create view 视图名\G;

三、使用视图
1、查询记录
select 字段名  from  视图名 where 条件;
2、插入记录
insert into  视图名(字段名)  values(字段值列表);
3、更新记录
update  视图名  set  字段名=值  shere 条件;
4、删除记录
delete  from   视图名  where  条件;

四、删除视图表
drop view 视图名;

+++++++++++视图进阶++++++++++++

一、创建视图的完全格式
1、强制创建视图
create  or replace  view 视图名 SQL查询；  //覆盖创建视图，强制创建

2、设置字段别名
方法1、create view 视图名(字段别名)   as  SQL查询
例子：
mysql> create table t1 select name,uid,gid from user limit 3;
mysql> create table t2 select name,uid,homedir,shell from user limit 5;
mysql> create view v3(a,b,c,d,e,f,g) as select * from t1,t2  where t1.uid=t2.uid;


方法2、create    view    视图名
as
select  表别名.源字段名   as 字段别名
from		源表名	表别名 left  join  源表名  on  条件;    //左连接查询
表名太长，也可以起别名
例子：
mysql> create view v4  as select t1.name as a , t1.uid as b , t1.gid as c , t2.name as d , t2.uid as e , t2.homedir as f , t2.shell as g  from t1,t2 where t1.uid=t2.uid;


二、选项
1、算法：algorithm
algorithm ={undefined | megre | temptable}		//没有定义算法时，默认使用megre
undefined		没有定义算法
megre			替换方式（不会单独执行建表的语句）
temptable		具体化方式（算法为temptable时，客户端访问该表，则该表会把创建表的命令先执行一次，把该结果放入内存里，然后再执行客户端的的操作）

2、限制对视图表的操作
with  check option

限制选项：
local  仅检查当前视图的限制（对视图操作时要满足视图本身的限制）
mysql> create  view v8 as select name,uid  from user where uid between 100 and 1000 with local check option;
mysql> update  v8 set uid=1002 where name="lisi";
ERROR 1369 (HY000): CHECK OPTION failed 'db9.v8'

cascaded   同时要满足基表的限制（默认值）
mysql> create  view v9 as select name,uid  from v8 where uid>300;
mysql> update  v9 set uid=1002 where name="lisi";			//符合v9的条件，但不符合基表的条件，插入失败
ERROR 1369 (HY000): CHECK OPTION failed 'db9.v9'

mysql> update  v9 set uid=100 where name="lisi";		//v9不符合，v8也不符合，失败
ERROR 1369 (HY000): CHECK OPTION failed 'db9.v9'

mysql> update  v9 set uid=444 where name="lisi";		//满足v9及基表的条件，成功
Query OK, 0 rows affected (0.03 sec)
Rows matched: 0  Changed: 0  Warnings: 0


mysql> create  view v10 as select name,uid  from user where uid>300 with check option;
mysql> update  v10 set uid=100 where name="lisi";
ERROR 1369 (HY000): CHECK OPTION failed 'db9.v10'	
mysql> update  v10 set uid=1008 where name="lisi";
Query OK, 1 row affected (0.05 sec)
Rows matched: 1  Changed: 1  Warnings: 0


================MySQL存储过程==================
一、存储过程
	相当于MySQL语句组成的脚本，一系列SQL命令集合，可以使用函数，条件判断、流程控制
二、存储过程优点
提高性能
可减轻网络负担
可以防止对表的直接访问
避免重复编写SQL操作
三、基本使用
1、创建存储过程
	delimiter    //			把命令行的结束符号该为"//"
	create  procedure 库名.存储过程名（）
	begin
		代码
	end
	//					结束存储过程
	delimiter  ;		把命令行的结束符号该回";"

例子：
delimiter    //		
create  procedure say1()
begin
	select count(*) from db9.user ;
end
//					
delimiter  ;		

2、执行存储过程
	call  库名.存储过程名（）;

例子：
mysql> call say1();				50//在db9库下
mysql> insert into db9.user(name,uid) values("tom",332);
mysql> call say1();						51

3、查看存储过程
 desc mysql.proc;
方法1、查看存储过程
 select  db,name,body,type from mysql.proc where name="存储过程名";

方法2、show procedure status;

方法3、查看所有的存储过程：
select  db,name,body,type from mysql.proc where type='procedure';
有自己创建的，也有mysql系统创建的

例子：
mysql> select  db,name,body,type from mysql.proc where type='procedure' and name='say1'\G;
mysql> select  db,name,body,type from mysql.proc where name="say1"\G;
*************************** 1. row ***************************
  db: db9
name: say1
body: begin
select count(*) from db9.user ;
end
type: PROCEDURE

4、查看功能代码（body字段）
select  db,name,body,type from mysql.proc where name="存储过程名";
select  db,name,body,type from mysql.proc where  type=procdure;

5、删除存储过程
drop procedure 库名.存储过程名；


+++++++++++++++存储过程进阶+++++++++++


一、变量类型
	全局变量：数据库启动时定义的变量
show global variables;			//查看全局变量
select @@version;				//	查看某个具体变量的值
show global variables  like '%version';		//查看包含某个值的全局变量
select    @@hostname;				//	查看某个具体变量的值

	会话变量：客户端连接服务器后产生的变量,值针对当前连接有效
show session variables;				//查看全部会话变量
show session variables like '%time%';			//列出当前所有与时间相关的会话变量
show session variables like 'time_zone';	//	查看某个具体变量的值
set session  sort_buffer_size=40000;			//单独修改当前某个变量的值，断开连接就失效
show session variables like 'sort_buffer_size';   //	查看某个具体变量的值
	
	用户变量：当前连接服务器用户自定义的变量
set @x=99;
set @name='haha';
select @x , @name;
set @name='haha' , @y=15 , @a=55;
 select @x , @y , @a ;

	局部变量：在存储过程里定义的变量
delimiter    //		
create  procedure say2()
begin
	declare name char(20);
	declare age int;
	set name="bob",age=28;
	select name,age;
end
//					
delimiter ;				//在存储过程里定义局部变量

mysql>call say2;				//查看定义的局部变量
+------+------+
| name | age  |
+------+------+
| bob  |   28 |
+------+------+

把查询结果赋值给自定义变量：
mysql> select count(name) into  @x from db9.user where shell!="/bin/bash";
mysql> select @x;

把查询结果赋值给局部变量：
delimiter    //		
create  procedure say3()
begin
	declare x int;
	declare y int;
	select count(name) into  x from db9.user where shell!="/bin/bash";
	select count(name) into  y from db9.user where shell="/bin/bash";
	select x , y;
end
//					
delimiter ;	

mysql> call say3();

mysql> insert into db9.user(name,shell) values("asha","/bin/bash"),("maoxian","/sbin/nologin");

mysql> call say3();

二、存储过程参数

+++++++++参数类型+++++++++++++++++

1、参数类型 	in		out		inout

in：把数据传递给存储过程处理(位置变量)
out：接收存储过程的处理结果
inout：前两者功能结合

2、使用
delimiter    //		
create  procedure 库名.存储过程名( 参数类型  参数名  数据类型)
begin
	功能代码
end
//					
delimiter ;	

例子：
a、in 类型
delimiter    //		
create  procedure say4(  in uname char(20)  )
begin
	select name from db9.user where name=uname;
end
//					
delimiter ;	
call say4('bob');
set @name='root';
call say4(@name);

b、out 类型，使用时必须要有一个变量去接受out类型的值
delimiter    //		
create  procedure say6(  in shname char(20) ,  out nums int)
begin
	select count(name)  into nums from db9.user where shell=shname;
	select nums;
end
//					
delimiter ;	

call say6('/bin/bash',@x);

c、inout类型，使用时需要先定义一个变量并赋值，给其传入值，再接收输出结果，并返回在屏幕上。

delimiter    //		
create  procedure say9(    inout numb int )
begin
	select * from db9.user where id <=  numb ;
	select count(name) into numb from db9.user ;
	select numb;
end
//					
delimiter ;	
set @y=4;				
call say9(@y);
select @y;

+++++++++++++++算术运算++++++++++++

1、符号
+		加法		set  @var1=2+2;  4
-		减法		set  @var1=6-2;  4
*		乘法		set  @var1=6*2;  12
/		除法		set  @var1=6/2;  3
DIV	整除		set  @var1=10 DIV  3;  3
%		取模		set  @var1=6%2;  0

例：
mysql> set @x=2 , @y=5;
mysql> set @z=@x * @y;
mysql> select @z;		10
mysql> set @a=@z % 3;	1
mysql> set @a=@z div 3;		3

delimiter    //		
create  procedure say11()
begin
	declare  x int;
	declare  y int;
	declare  z int;
	set x=0 , y=0;
	select count(name) into x from db9.user where shell!="/bin/bash";
	select count(name) into y from db9.user where shell="/bin/bash";
	set z = x + y;
	select x , y , z; 
end
//					
delimiter ;	

mysql> call say11();
+------+------+------+
| x    | y    | z    |
+------+------+------+
|   42 |    5 |   47 |
+------+------+------+


=================流程控制================

一、if结构
1、单分支结构
if   条件测试   then
		代码……
end  if;

2、双分支结构
if   条件测试   then
		代码1……
else
		代码2……
 
end  if;

例子：
1、单分支
delimiter    //		
create  procedure say12( in x int)
begin
	if  x < 10 then
		select * from db9.user where id <= x;
	end if;
end
//					
delimiter ;	
call say12(3);
call say12(11);

2、双分支
delimiter    //		
create  procedure say13( in x int)
begin
	if  x < 10 then
		select * from db9.user where id <= x;
	else
		select * from db9.user where id > x;
	end if;
end
//					
delimiter ;	
call say13(3);
call say13(11);


二、循环结构(重复执行的命令集合)
1、while 循环
delimiter    //		
create  procedure say()
begin
	while  条件判断	do
		循环语句
	end while；
end
//					
delimiter ;	

例子：
delimiter    //		
create  procedure p1( in linenum int)
begin
	declare y int;
	set y = 1;
	while y <= linenum do
		select y;
		set y = y + 1;
	end while;
end
//					
delimiter ;	
call p1(3);
call p1(10);

2、loop 死循环 ，无条件、反复执行某一段代码
loop
	循环体
end  loop;

例子：
delimiter    //		
create  procedure p2()
begin
	declare y int;
	set y = 1;
	loop
		select y;
	end  loop;
end
//					
delimiter ;	
call p2;

3、repeat 条件式循环
当条件成立时结束循环
格式：
repeat
	循环体
	……
	until		条件判断
end   repeat;

例子：
delimiter    //		
create  procedure p3( in  y  int )
begin
	declare x int;
	set x = 1;
	repeat
		select x;
		set x = x + 1;
		until  x > y
	end  repeat;
end
//					
delimiter ;	
call p3(4);

三、流程控制

leave  标签名   //退出循环（exit）
iterate		标签名   //放弃本次循环，执行下一次循环（continue）

应用：
delimiter    //		
create  procedure p5()
begin
	declare y int;
	set y = 1;
	abc:while y <= 10 do
		if y = 5  or  y = 6  then   不输出5.6
			set y = y + 1;
			iterate abc;			
		end if;
		if y = 8  then				到8，结束循环
			leave abc;
		end if;
		select y;
		set y = y + 1;
	end while;
end
//					
delimiter ;	

练习：
要求：
1、定义名称weip3的存储过程
2、用户可以自定义显示user表记录的行数(变量 in)
3、若调用时用户没有输入行数（变量为空），默认显示第一条记录 （id=1的记录）

delimiter    //		
create  procedure p3( in num int )
begin
	if num is not null   then
		select  *  from db9.user  where id <= num ;
	else 
		select * from db9.user where id=1 ;
	end if;
end
//					
delimiter ;	

call p3(8);









